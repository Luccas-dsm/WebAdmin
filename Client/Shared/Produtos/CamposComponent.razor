@using WebAdmin.Shared.Enums;
@using WebAdmin.Shared.Models;

<EditForm Model="Campo" OnValidSubmit="SubmitValid" >
    <div class="c-group__item">
        <div class="c-character">
            <div class="c-form__field">
                <label class="c-form__label" for="">Nome do campo</label>
                <MudTextField  Class="c-form__input" @bind-Value="Campo.Input" Variant="Variant.Text" Required="true" id="" ErrorText="O campo input é obrigatório"></MudTextField>

            </div>
            <div class="c-form__field">
                <label class="c-form__label" for="">Informativo</label>
                <MudTextField Class="c-form__input" @bind-Value="Campo.Informativo" Variant="Variant.Text" Required="true" id="" ErrorText="O campo informativo é obrigatório"></MudTextField>
            </div>
            <div class="c-checkbox__group">
                <label class="c-form__label" for="c-check">Campo obrigatório</label>
                <MudCheckBox Class="c-form__input" @bind-Checked="Campo.Obrigatorio" Variant="Variant.Text" Required="true" id="" ErrorText="O campo é obrigatório"></MudCheckBox>
            </div>
        </div>
        <div class="c-form__field">
            <label class="c-form__label" for="">Opções disponíveis</label>
            <MudTextField Class="c-form__input" @bind-Value="NovaOpcao" Variant="Variant.Text" Required="true" id="" ErrorText="O campo opção é obrigatório" @onkeyup="@Enter"></MudTextField>

            <MudChipSet AllClosable="true" OnClose="Closed">
                @if (Campo.Opcoes.Count() > 0)
                {
                    @foreach (var value in Campo.Opcoes)
                    {
                        <MudChip Text="@value" Color="Color.Primary"></MudChip>
                    }
                }
            </MudChipSet>
        </div>
        <button type="button" class="c-btn__tertiary-danger" @onclick="(() => OnRemoverCampo.InvokeAsync(Campo))">
            X
            <span>Remover campo</span>
        </button>
    </div>

    <DataAnnotationsValidator/>
</EditForm>
@code {

    public string NovaOpcao { get; set; }

    [Parameter]
    public EventCallback<CampoModel> OnRemoverCampo { get; set; }

    [Parameter]
    public CampoModel Campo { get; set; }

    public void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            Campo.Opcoes.Add(NovaOpcao);
            NovaOpcao = "";
        }
    }
    public async Task SubmitValid()
    {
        Console.WriteLine("Campos preenchidos corretamente");
    }

    public void Closed(MudChip chip) => Campo.Opcoes.Remove(chip.Text);
}
