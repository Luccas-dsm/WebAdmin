@page "/produtos"
@using WebAdmin.Client.Shared.Produtos
@using WebAdmin.Shared.Models;
@inject HttpClient Http


<div class="container">
    <div>
        <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#AddEditModal" @onclick="(() =>LimpaProduto ())">
            Adicionar Produto
        </button>
    </div>

    <h2>Tabela de produtos cadastrados</h2>
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Nome</th>
                <th>Editar ou Excluir</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var item in Produtos)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Nome</td>
                    <td>
                        <button type="button" class="btn btn-primary" data-bs-toggle="modal" @onclick="@(async () => await GetProduto(item.Id))" data-bs-target="#AddEditModal">
                            Editar
                        </button>

                        <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#DeletarProdutoModal" @onclick="@(async () => await GetProduto(item.Id))">
                            Excluir
                        </button>
                    </td>
                </tr>
            }
            <!-- Adicione mais linhas conforme necessário -->
        </tbody>
    </table>
</div>

@*Modal Deletar*@
<div class="modal fade" id="DeletarProdutoModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Modal title</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="(async () =>LimpaProduto())"></button>
            </div>
            <div class="modal-body">
                Deseja realmente excluir o item "@Produto.Nome"?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" @onclick="@(async () => await DeleteProduto(Produto.Id))" data-bs-dismiss="modal">Sim</button>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="(async () =>LimpaProduto())">Não</button>
            </div>
        </div>
    </div>
</div>

@*Modal Adicionar e Editar*@
<div class="modal fade" id="AddEditModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="ManterProdutoModalLabel">Modal title</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="(async () =>LimpaProduto())"></button>
            </div>
            <div class="modal-body">
                <div class="container">
                    <h1>Cadastro de Produto</h1>
                    <form class="row g-3">
                        <div class="col-md-4">
                            <label for="inputNome" class="form-label">Nome do Produto</label>
                            <input type="text" class="form-control" id="inputNome" @bind="@Produto.Nome">
                        </div>

                        <div class="col-2">
                            <label for="inputPalavrasChave" class="form-label">Palavras Chave</label>
                            <select id="inputPalavrasChave" class="form-select">

                                <option selected>Selecione...</option>
                                @if (Produto.PalavrasChave != null && Produto.PalavrasChave.Count() > 0)
                                {
                                    @foreach (var item in Produto.PalavrasChave)
                                    {
                                        <option value="@item">@item</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="form-check col-md-2">
                            <input class="form-check-input" type="checkbox" value="" id="Destaque" @bind="@Produto.Destaque">
                            <label class="form-check-label" for="Destaque">
                                Destaque
                            </label>
                        </div>
                        <div class="form-check col-md-4">
                            <input class="form-check-input" type="checkbox" value="" id="ProdutoPromocao" @bind="@Produto.ProdutoEmPromocao">
                            <label class="form-check-label" for="ProdutoPromocao">
                                Produto em promoção
                            </label>
                        </div>

                        @if (Produto.Imagem != null && Produto.Imagem.Count() > 0)
                        {

                            <div class="col-md-6">
                                <label for="textAreaDescricao">Descrição</label>
                                <textarea class="form-control" id="textAreaDescricao" rows="3" @bind="@Produto.Descricao"></textarea>
                            </div>
                            <div class="col-md-6">
                                <img src="@Produto.Imagem.FirstOrDefault().Url" class="img-fluid" alt="Responsive image">
                            </div>
                        }
                        else
                        {
                            <div class="col-md-12">
                                <label for="textAreaDescricao">Descrição</label>
                                <textarea class="form-control" id="textAreaDescricao" rows="3" @bind="@Produto.Descricao"></textarea>
                            </div>
                        }
                        <div class="input-group col-md-12">
                            <InputFile OnChange="@LoadFiles" multiple class="form-control" id="inputGroupFile02" />

                            <label class="input-group-text" for="inputGroupFile02">Upload</label>
                        </div>

                    </form>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="(async () =>LimpaProduto())">Close</button>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="(async () =>OnSubmit())">Save changes</button>
            </div>
        </div>
    </div>
</div>




@code {
    protected ProdutoModel Produto;

    protected List<ProdutoModel>? Produtos = new List<ProdutoModel>();

    protected override async Task OnInitializedAsync()
    {
        LimpaProduto();
        await GetProdutos();
    }

    protected void LimpaProduto()
    {
        Produto = new ProdutoModel();
    }

    protected async Task<List<ProdutoModel>> GetProdutos()
    {
        Produtos = await Http.GetFromJsonAsync<List<ProdutoModel>>("Produto");
        Produtos.OrderBy(o => o.Nome);

        return Produtos;
    }

    protected async Task GetProduto(string id)
    {
        Produto = await Http.GetFromJsonAsync<ProdutoModel>("Produto/" + id);
    }

    protected async Task DeleteProduto(string id)
    {
        var save = await Http.DeleteAsync("produto/" + id);
        if (save.IsSuccessStatusCode)
        {
            await GetProdutos();
        }
        LimpaProduto();
    }

    protected async Task OnSubmit()
    {
        HttpResponseMessage save;

        if (string.IsNullOrEmpty(Produto.Id))
        {
            save = await Http.PostAsJsonAsync("Produto", this.Produto);
        }
        else
        {
            save = await Http.PutAsJsonAsync("Produto", this.Produto);
        }

        LimpaProduto();
        await GetProdutos();
    }


    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        if (string.IsNullOrEmpty(Produto.Id) || Produto.Imagem == null)
            Produto.Imagem = new List<ArquivoModel>();


        var arquivosSelecionados = e.GetMultipleFiles();
        foreach (var file in arquivosSelecionados)
        {
            Stream stream = file.OpenReadStream();
            MemoryStream ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            stream.Close();
            ArquivoModel arquivo = new ArquivoModel();
            arquivo.Nome = file.Name;
            arquivo.Tipo = file.ContentType;
            arquivo.Conteudo = ms.ToArray();

            ms.Close();
            Produto.Imagem.Add(arquivo);
        }
    }


}





