@page "/detalhe-produto"
@using WebAdmin.Client.Shared.Produtos
@using WebAdmin.Shared.Enums;
@using WebAdmin.Shared.Models;
@inject HttpClient Http

<h1>Detalhe do produto</h1>

<div class="c-container">
    <h2 class="c-container__title">Informações básicas</h2>

    <div class="c-group">
        <div class="c-group__item">
            <div class="c-form__field">
                <label class="c-form__label" for="">Nome do Produto</label>
                <input class="c-form__input" type="text" id="" @bind="@Produto.Nome">
            </div>
            <div class="c-form__field">
                <label class="c-form__label" for="">Descrição</label>
                <textarea class="c-form__textarea" type="text" id="" @bind="@Produto.Descricao"></textarea>
            </div>
        </div>

        <div class="c-images c-group__item">
            @foreach (var index in Enumerable.Range(0, 4))
            {
                <label class="c-images__item" for=@("imagem-" + index)>
                    <img class="c-images__preview" src=@( String.IsNullOrEmpty(selectedImages[index]) ? $"assets\\images\\imagem_padrao_{index + 1}.png" : selectedImages[index]) />
                </label>
                <InputFile hidden="true" type="file" id=@("imagem-" + index) OnChange="(e) => SelecionarImagem(e, index)" />
            }
        </div>
    </div>
</div>

<div class="c-container">
    <h2 class="c-container__title">Características que deverão ser selecionadas pelo usuário</h2>

    @if (Produto.Campos != null)
    {
        @foreach (var item in Produto.Campos)
        {
            <CamposComponent OnRemoverCampo="RemoverCampo" Campo="@item"></CamposComponent>
        }
    }

    <hr />
    <button class="c-btn__tertiary" @onclick="AddItem">
        +
        <span>Adicionar campo</span>
    </button>
</div>
<div class="c-btn__group">
    <button class="c-btn__secondary-danger">
        <span>Cancelar</span>
    </button>
    <button class="c-btn__primary">
        <span>Salvar alterações</span>
    </button>
</div>

@code {
    public string Texto { get; set; }
    int i = 1;
    List<string> values = new List<string>();
    public void Closed(MudChip chip) => values.Remove(chip.Text);

    protected ProdutoModel Produto = new ProdutoModel();

    private string[] selectedImages = new string[4];

    protected override async Task OnInitializedAsync()
    {
        await GetProduto("0MHUxGuthSK5TecioMwu");

        if (Produto.Campos == null)
        {
            Produto.Campos = new List<CampoModel>() { new CampoModel() { Opcoes = new List<string>() } };
        }
    }

    protected async Task GetProduto(string id)
    {
        Produto = await Http.GetFromJsonAsync<ProdutoModel>("Produto/" + id);
    }

    protected void AddItem()
    {
        Produto.Campos.Add(new CampoModel() { Opcoes = new List<string?>() });
    }

    protected void RemoverCampo(CampoModel campo)
    {
        Produto.Campos.Remove(campo);
    }

    private async Task SelecionarImagem(InputFileChangeEventArgs e, int index)
    {
        var file = e.File;
        var buffer = new byte[file.Size];

        await file.OpenReadStream().ReadAsync(buffer);

        // Pode armazenar o buffer em uma base de dados ou fazer o que desejar com ele.
        // Aqui, estamos apenas convertendo para base64 e exibindo na tela.
        selectedImages[index] = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
    }
}